<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.platform.snail.portal.dao.TopUpRecordsDao">
	<resultMap id="records" type="org.platform.snail.portal.model.TopUpRecords">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="way" property="way" jdbcType="CHAR" />
		<result column="cost" property="cost" jdbcType="VARCHAR" />
		<result column="coins" property="coins" jdbcType="VARCHAR" />
		<result column="gems" property="gems" jdbcType="VARCHAR" />
		<result column="pk_card" property="pkCard" jdbcType="VARCHAR" />		
		<result column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="user_name" property="userName" jdbcType="VARCHAR" />
		<result column="agent_id" property="agentId" jdbcType="INTEGER" />
		<result column="agent_name" property="agentName" jdbcType="VARCHAR" />
		<result column="order_id" property="orderId" jdbcType="VARCHAR" />
		<result column="paysapi_id" property="paysApiId" jdbcType="VARCHAR" />
		<result column="realprice" property="realPrice" jdbcType="VARCHAR" />
		<result column="pay_status" property="payStatus" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
	</resultMap>
	<resultMap id="recordsVo" extends="records"
		type="org.platform.snail.portal.vo.TopUpRecordsVo">
	</resultMap>
	<select id="init" resultType="int">
		select 1 from dual
	</select>
	<sql id="recordsPagingWhereCondition">
		from top_up_records t where 1=1
		<if test='condition.way!=null and condition.way!=""'>
			and t.way =#{condition.way,jdbcType=VARCHAR}
		</if>
		<if test='condition.userId!=null and condition.userId!=""'>
			and t.user_id =#{condition.userId,jdbcType=VARCHAR}
		</if>
		<if test='condition.agentId!=null and condition.agentId!=""'>
			and t.agent_id =#{condition.agentId,jdbcType=VARCHAR}
		</if>
		<if test='condition.payStatus!=null and condition.payStatus!=""'>
			and t.pay_status =#{condition.payStatus,jdbcType=VARCHAR}
		</if>
		<if test='condition.startDate!=null and condition.startDate!=""'>
			<![CDATA[
				and t.create_time >=#{condition.startDate}
			]]>
		</if>
		<if test='condition.endDate!=null and condition.endDate!=""'>
			<![CDATA[
				and t.create_time <=#{condition.endDate}
			]]>
		</if>

		<!-- agentSearch为1代表是 代理在使用 找到他的所有附属 -->
		<if test='agentSearch=="1" and agentSearchId!=null and agentSearchId!=""'>
			and EXISTS(
			SELECT *
			FROM
			(
			SELECT a.userid
			FROM t_users a
			WHERE a.parent_agent_id=${agentSearchId} UNION
			SELECT b.userid
			FROM
			t_users b
			WHERE
			EXISTS(
			SELECT *
			FROM t_users c
			WHERE
			c.parent_agent_id=${agentSearchId} AND
			c.agent_id=b.parent_agent_id)
			UNION
			SELECT d.userid
			FROM t_users d
			WHERE EXISTS(
			SELECT *
			FROM t_users b
			WHERE EXISTS(
			SELECT *
			FROM t_users
			c
			WHERE
			c.parent_agent_id=${agentSearchId} AND c.agent_id=b.parent_agent_id)
			AND
			b.agent_id=d.parent_agent_id)) r where r.userid=t.user_id )
		</if>
	</sql>
	<select id="findRecordsListCount" resultType="int">
		SELECT COUNT(*)
		<include refid="recordsPagingWhereCondition" />
	</select>
	<select id="findRecordsList" resultMap="recordsVo">
		select *
		<include refid="recordsPagingWhereCondition" />
		<choose>
			<when test='orderBy!=null and orderBy!=""'>
				ORDER BY ${orderBy}
			</when>
			<otherwise>
				ORDER BY t.create_time desc
			</otherwise>
		</choose>
		limit #{start},#{limit}
	</select>

	<insert id="insertRecords" parameterType="org.platform.snail.portal.model.TopUpRecords">
		insert into
		top_up_records
		(
		uuid,
		way,
		cost,
		coins,
		gems,
		pk_card,
		user_id,
		user_name,
		agent_id,
		agent_name,
		create_time
		)
		values (
		uuid(),
		#{records.way,jdbcType=CHAR},
		#{records.cost,jdbcType=VARCHAR},
		#{records.coins,jdbcType=VARCHAR},
		#{records.gems,jdbcType=VARCHAR},
		#{records.pkCard,jdbcType=VARCHAR},
		#{records.userId,jdbcType=INTEGER},
		#{records.userName,jdbcType=VARCHAR},
		#{records.agentId,jdbcType=INTEGER},
		#{records.agentName,jdbcType=VARCHAR},
		now()
		)
	</insert>
</mapper>